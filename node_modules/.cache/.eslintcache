[{"C:\\Users\\Lenovo\\boggle\\src\\index.js":"1","C:\\Users\\Lenovo\\boggle\\src\\App.js":"2","C:\\Users\\Lenovo\\boggle\\src\\reportWebVitals.js":"3","C:\\Users\\Lenovo\\boggle\\src\\boggle_solver.js":"4","C:\\Users\\Lenovo\\boggle\\src\\GuessInput.js":"5","C:\\Users\\Lenovo\\boggle\\src\\Board.js":"6","C:\\Users\\Lenovo\\boggle\\src\\FoundSolutions.js":"7","C:\\Users\\Lenovo\\boggle\\src\\SummaryResults.js":"8","C:\\Users\\Lenovo\\boggle\\src\\ToggleGameState.js":"9","C:\\Users\\Lenovo\\boggle\\src\\GameState.js":"10","C:\\Users\\Lenovo\\boggle\\src\\randomGen.js":"11","C:\\Users\\Lenovo\\boggle\\src\\Authentication.js":"12","C:\\Users\\Lenovo\\boggle\\src\\firebase.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":3506,"mtime":1638756852130,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":3350,"mtime":1636325324060,"results":"18","hashOfConfig":"15"},{"size":1088,"mtime":1638248003578,"results":"19","hashOfConfig":"15"},{"size":1102,"mtime":1636327569875,"results":"20","hashOfConfig":"15"},{"size":436,"mtime":1636324387311,"results":"21","hashOfConfig":"15"},{"size":461,"mtime":1636322570679,"results":"22","hashOfConfig":"15"},{"size":5708,"mtime":1638756707448,"results":"23","hashOfConfig":"15"},{"size":207,"mtime":1638246351226,"results":"24","hashOfConfig":"15"},{"size":2238,"mtime":1638755738803,"results":"25","hashOfConfig":"15"},{"size":984,"mtime":1638749738065,"results":"26","hashOfConfig":"15"},{"size":528,"mtime":1638248972555,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"27qojz",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Lenovo\\boggle\\src\\index.js",[],["56","57"],"C:\\Users\\Lenovo\\boggle\\src\\App.js",["58"],"C:\\Users\\Lenovo\\boggle\\src\\reportWebVitals.js",[],"C:\\Users\\Lenovo\\boggle\\src\\boggle_solver.js",["59","60","61","62"],"//Boggle Assignment 3: Improved after review\n//Submitted by Aashish Adhikari @02986124\n\n//added comments as per the suggestion\n//added more test cases\n\n//Initializing Trie class\nclass Trie{\n  constructor(){\n    this.head = {}\n    this.end = '#'  \n  }\n\n//inserting a word inside trie for faster lookups\ninsert(word) {       \n  var length = word.length\n  if (length == 0) return;\n  var node = this.head\n  for (var i = 0; i < length; i++) {\n    var char = word[i]\n    if (!(char in node)) {\n      node[char] = {}\n    }\n    node = node[char]\n  }\n  node[this.end] = word\n}\n}  \n//this will search in our trie along the path of dfs\nexports.searchTrie = function() {\n  for (var i = 0; i < this.rows; i++) {\n    for (var j = 0; j < this.columns; j++) {\n      var visited = new Array(this.rows).fill(0).map(() => new Array(this.columns).fill(false))\n      this.dfs(this.trie.head, i, j, visited)\n    }\n  }\n}\n\n//this function appends to our set all the found valid solutions and takes cares of edge cases like empty grid, empty dict\n exports.findAllSolutions = function(grid, dictionary) {\n  if (!grid.length) return []\n  if (grid == null || dictionary == null) return []\n\n  this.rows = grid.length\n  this.columns = grid[0].length\n  for (var i = 0; i < this.rows; i++) {\n    if (grid[i].length != this.columns) return []\n  }\n\n  this.solns = new Set();\n\n  this.rows = grid.length\n  this.columns = grid[0].length\n  this.directions = [-1, 0, 1] //directions to move in the grid\n  this.grid = grid  //initializing grid reference inside the function\n\n  this.trie = new Trie();  //initialising new trie object to add our words from dict\n  for (const word of dictionary) {\n    if (word.length > 2) this.trie.insert(word.toLowerCase())\n  }\n\n  this.searchTrie(); //searching the trie with words from dict\n\n  return Array.from(this.solns).sort();  //return valid words\n}\n\n//checking to see if we go out of bounds of our grid\nexports.isSafeToVisit = function (i, j, visited){\n\treturn (i >= 0 && i < this.rows && j >= 0 && j < this.columns && !visited[i][j]); \n};\n\n\n//traversing adjacent tiles defined within our directions\nexports.traverseAdjacent = function(node, x, y, visited) {\n  if (this.trie.end in node) {\n    var word = node[this.trie.end]\n    this.solns.add(word)\n  }\n  for (var i of this.directions) {\n    for (var j of this.directions) {\n      var xi = x + i\n      var yi = y + j\n      if (this.isSafeToVisit(xi, yi, visited)) {\n        this.dfs(node, xi, yi, visited)\n      }\n    }\n  }\n}\n//the originial dfs function that moves along the path and adds found words\nexports.dfs = function(node, x, y, visited) {\n\n  if (this.trie.end in node) {\n    var found = node[this.trie.end]\n    if (found.length > 2) this.solns.add(found)\n  }\n\n  if (visited[x][y]) return\n  visited[x][y] = true\n\n  var char = this.grid[x][y].toLowerCase()\n  if (char.length == 1) {\n    if (char in node) {\n      node = node[char]\n      this.traverseAdjacent(node, x, y, visited)\n    }\n  } else {\n    var temp = node\n    var i = 0\n    var search = true\n    while (i < char.length && search) {\n      if (char[i] in temp && temp[char[i]] != '#') {\n        temp = temp[char[i]]\n        i++\n      } else {\n        search = false\n      }\n    }\n    if (search) {\n      this.traverseAdjacent(temp, x, y, visited)\n    }\n  }\n\n  visited[x][y] = false  //set visited to false after moving down a path\n}","C:\\Users\\Lenovo\\boggle\\src\\GuessInput.js",[],"C:\\Users\\Lenovo\\boggle\\src\\Board.js",[],"C:\\Users\\Lenovo\\boggle\\src\\FoundSolutions.js",[],"C:\\Users\\Lenovo\\boggle\\src\\SummaryResults.js",[],"C:\\Users\\Lenovo\\boggle\\src\\ToggleGameState.js",[],"C:\\Users\\Lenovo\\boggle\\src\\GameState.js",[],"C:\\Users\\Lenovo\\boggle\\src\\randomGen.js",[],"C:\\Users\\Lenovo\\boggle\\src\\Authentication.js",[],"C:\\Users\\Lenovo\\boggle\\src\\firebase.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":13,"column":8,"nodeType":"69","messageId":"70","endLine":13,"endColumn":16},{"ruleId":"71","severity":1,"message":"72","line":17,"column":14,"nodeType":"73","messageId":"74","endLine":17,"endColumn":16},{"ruleId":"71","severity":1,"message":"75","line":47,"column":24,"nodeType":"73","messageId":"74","endLine":47,"endColumn":26},{"ruleId":"71","severity":1,"message":"72","line":101,"column":19,"nodeType":"73","messageId":"74","endLine":101,"endColumn":21},{"ruleId":"71","severity":1,"message":"75","line":111,"column":44,"nodeType":"73","messageId":"74","endLine":111,"endColumn":46},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]