{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\boggle\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './boggle.png';\nimport solver from './boggle_solver.js';\nimport { LoginButton, LogoutButton } from './Authentication.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport React, { useState, useEffect } from 'react';\nimport { GAME_STATE } from './GameState.js';\nimport { RandomGrid } from './randomGen.js';\nimport './App.css';\nimport firebase from \"./firebase.js\"; // useEffect will trigger when the array items in the second argument are\n// updated so whenever grid is updated, we will recompute the solutions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentUser, setCurrentUser] = useState(null);\n  const [allSolutions, setAllSolutions] = useState([]); // solutions from solver\n\n  const [foundSolutions, setFoundSolutions] = useState([]); // found by user\n\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE); // Just an enuerator or the three states see below\n\n  const [grid, setGrid] = useState([]); // the grid\n\n  const [totalTime, setTotalTime] = useState(0); // total time elapsed\n\n  const [size, setSize] = useState(3); // selected grid size\n\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n\n    let tmpAllSolutions = solver.findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]); // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      style: \"width:100\",\n      className: \"App-logo\",\n      alt: \"Boggle Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LogoutButton, {\n        setCurrentUser: setCurrentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ToggleGameState, {\n        gameState: gameState,\n        setGameState: state => setGameState(state),\n        setSize: state => setSize(state),\n        setTotalTime: state => setTotalTime(state),\n        numFound: foundSolutions.length,\n        theGrid: JSON.stringify(grid),\n        setGrid: state => setGrid(state),\n        user: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), gameState === GAME_STATE.IN_PROGRESS && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          board: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n          allSolutions: allSolutions,\n          foundSolutions: foundSolutions,\n          correctAnswerCallback: answer => correctAnswerFound(answer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n          headerText: \"Solutions you've found\",\n          words: foundSolutions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this), gameState === GAME_STATE.ENDED && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          board: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SummaryResults, {\n          words: foundSolutions,\n          totalTime: totalTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n          headerText: \"Missed Words [wordsize > 3]: \",\n          words: allSolutions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(LoginButton, {\n      setCurrentUser: user => setCurrentUser(user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"Zqgr2JDsHPxovX46ghUE1te0k7A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Lenovo/boggle/src/App.js"],"names":["logo","solver","LoginButton","LogoutButton","Board","GuessInput","FoundSolutions","SummaryResults","ToggleGameState","React","useState","useEffect","GAME_STATE","RandomGrid","firebase","App","currentUser","setCurrentUser","allSolutions","setAllSolutions","foundSolutions","setFoundSolutions","gameState","setGameState","BEFORE","grid","setGrid","totalTime","setTotalTime","size","setSize","wordList","require","tmpAllSolutions","findAllSolutions","words","IN_PROGRESS","correctAnswerFound","answer","console","log","state","length","JSON","stringify","ENDED","user"],"mappings":"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","sourcesContent":["import logo from './boggle.png';\nimport solver from './boggle_solver.js';\nimport {LoginButton, LogoutButton} from './Authentication.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport React, { useState, useEffect } from 'react';\nimport {GAME_STATE} from './GameState.js';\nimport {RandomGrid} from './randomGen.js';\nimport './App.css';\nimport firebase from \"./firebase.js\"\n\n\n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [allSolutions, setAllSolutions] = useState([]);  // solutions from solver\n  const [foundSolutions, setFoundSolutions] = useState([]);  // found by user\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE); // Just an enuerator or the three states see below\n  const [grid, setGrid] = useState([]);   // the grid\n  const [totalTime, setTotalTime] = useState(0);  // total time elapsed\n  const [size, setSize] = useState(3);  // selected grid size\n\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = solver.findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n  return (\n      <div className=\"App\">\n        <img src={logo} style=\"width:100\" className=\"App-logo\" alt=\"Boggle Logo\" />\n        {currentUser ? (\n          <div>\n            <LogoutButton setCurrentUser={setCurrentUser}/>\n            <ToggleGameState gameState={gameState}\n              setGameState={(state) => setGameState(state)}\n              setSize={(state) => setSize(state)}\n              setTotalTime={(state) => setTotalTime(state)}\n              numFound={foundSolutions.length}\n              theGrid={JSON.stringify(grid)}\n              setGrid={(state) => setGrid(state)}\n              user={currentUser}/> \n  \n            { gameState === GAME_STATE.IN_PROGRESS &&\n              <div>\n                <Board board={grid} />\n                <GuessInput allSolutions={allSolutions}\n                  foundSolutions={foundSolutions}\n                  correctAnswerCallback={(answer) => correctAnswerFound(answer)}/>\n                <FoundSolutions headerText=\"Solutions you've found\" words={foundSolutions} />\n              </div>\n            }\n  \n            { gameState === GAME_STATE.ENDED &&\n              <div>\n                <Board board={grid} />\n                <SummaryResults words={foundSolutions} totalTime={totalTime} />\n                <FoundSolutions headerText=\"Missed Words [wordsize > 3]: \" words={allSolutions}  />\n              </div>\n            }\n          </div>\n        ) : (\n          <LoginButton setCurrentUser={(user) => setCurrentUser(user)} />\n        )}\n      </div>\n    );\n  }\n  \n  export default App;\n  "]},"metadata":{},"sourceType":"module"}