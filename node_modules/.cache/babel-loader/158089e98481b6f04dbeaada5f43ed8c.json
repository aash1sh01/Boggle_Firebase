{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\boggle\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './boggle.png';\nimport findAllSolutions from './boggle_solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport React, { useState, useEffect } from 'react';\nimport { GAME_STATE } from './GameState.js';\nimport { RandomGrid } from './randomGen.js';\nimport './App.css'; // useEffect will trigger when the array items in the second argument are\n// updated so whenever grid is updated, we will recompute the solutions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]); // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n\n  const [allSolutions, setAllSolutions] = useState([]); // solutions from solver\n\n  const [foundSolutions, setFoundSolutions] = useState([]); // found by user\n\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE); // Just an enuerator or the three states see below\n\n  const [grid, setGrid] = useState([]); // the grid\n\n  const [totalTime, setTotalTime] = useState(0); // total time elapsed\n\n  const [size, setSize] = useState(3); // selected grid size\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      width: \"25%\",\n      height: \"25%\",\n      class: \"logo\",\n      alt: \"Bison Boggle Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToggleGameState, {\n      gameState: gameState,\n      setGameState: state => setGameState(state),\n      setSize: state => setSize(state),\n      setTotalTime: state => setTotalTime(state)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.IN_PROGRESS && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n        allSolutions: allSolutions,\n        foundSolutions: foundSolutions,\n        correctAnswerCallback: answer => correctAnswerFound(answer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Solutions you've found\",\n        words: foundSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.ENDED && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SummaryResults, {\n        words: foundSolutions,\n        totalTime: totalTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Missed Words [wordsize > 3]: \",\n        words: allSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"g+pfEw834EzRPVGgmHVvZUmq3GM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Lenovo/boggle/src/App.js"],"names":["logo","findAllSolutions","Board","GuessInput","FoundSolutions","SummaryResults","ToggleGameState","React","useState","useEffect","GAME_STATE","RandomGrid","App","wordList","require","tmpAllSolutions","grid","words","setAllSolutions","gameState","IN_PROGRESS","setGrid","size","setFoundSolutions","correctAnswerFound","answer","console","log","foundSolutions","allSolutions","setGameState","BEFORE","totalTime","setTotalTime","setSize","state","ENDED"],"mappings":"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","sourcesContent":["import logo from './boggle.png';\nimport findAllSolutions from './boggle_solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport React, { useState, useEffect } from 'react';\nimport {GAME_STATE} from './GameState.js';\nimport {RandomGrid} from './randomGen.js';\nimport './App.css';\n\n\n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n\n\n \nfunction App() {\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n  const [allSolutions, setAllSolutions] = useState([]);  // solutions from solver\n  const [foundSolutions, setFoundSolutions] = useState([]);  // found by user\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE); // Just an enuerator or the three states see below\n  const [grid, setGrid] = useState([]);   // the grid\n  const [totalTime, setTotalTime] = useState(0);  // total time elapsed\n  const [size, setSize] = useState(3);  // selected grid size\n  return (\n    <div className=\"App\">\n      \n        <img src={logo}  width=\"25%\" height=\"25%\" class=\"logo\" alt=\"Bison Boggle Logo\" /> \n\n        <ToggleGameState gameState={gameState}\n                       setGameState={(state) => setGameState(state)} \n                       setSize={(state) => setSize(state)}\n                       setTotalTime={(state) => setTotalTime(state)}/>\n\n      { gameState === GAME_STATE.IN_PROGRESS &&\n        <div>\n          <Board board={grid} />\n\n          <GuessInput allSolutions={allSolutions}\n                      foundSolutions={foundSolutions}\n                      correctAnswerCallback={(answer) => correctAnswerFound(answer)}/>\n          <FoundSolutions headerText=\"Solutions you've found\" words={foundSolutions} />\n        </div>\n      }\n      { gameState === GAME_STATE.ENDED &&\n        <div>\n          <Board board={grid} />\n          <SummaryResults words={foundSolutions} totalTime={totalTime} />\n          <FoundSolutions headerText=\"Missed Words [wordsize > 3]: \" words={allSolutions}  />\n          \n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}