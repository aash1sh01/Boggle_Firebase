[{"C:\\Users\\Lenovo\\boggle\\src\\index.js":"1","C:\\Users\\Lenovo\\boggle\\src\\App.js":"2","C:\\Users\\Lenovo\\boggle\\src\\reportWebVitals.js":"3","C:\\Users\\Lenovo\\boggle\\src\\boggle_solver.js":"4","C:\\Users\\Lenovo\\boggle\\src\\GuessInput.js":"5","C:\\Users\\Lenovo\\boggle\\src\\Board.js":"6","C:\\Users\\Lenovo\\boggle\\src\\FoundSolutions.js":"7","C:\\Users\\Lenovo\\boggle\\src\\SummaryResults.js":"8","C:\\Users\\Lenovo\\boggle\\src\\ToggleGameState.js":"9","C:\\Users\\Lenovo\\boggle\\src\\GameState.js":"10","C:\\Users\\Lenovo\\boggle\\src\\randomGen.js":"11","C:\\Users\\Lenovo\\boggle\\src\\Authentication.js":"12","C:\\Users\\Lenovo\\boggle\\src\\firebase.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":3435,"mtime":1638749970498,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":3350,"mtime":1636325324060,"results":"18","hashOfConfig":"15"},{"size":1088,"mtime":1638248003578,"results":"19","hashOfConfig":"15"},{"size":1102,"mtime":1636327569875,"results":"20","hashOfConfig":"15"},{"size":436,"mtime":1636324387311,"results":"21","hashOfConfig":"15"},{"size":461,"mtime":1636322570679,"results":"22","hashOfConfig":"15"},{"size":5696,"mtime":1638754825024,"results":"23","hashOfConfig":"15"},{"size":207,"mtime":1638246351226,"results":"24","hashOfConfig":"15"},{"size":2135,"mtime":1636320808176,"results":"25","hashOfConfig":"15"},{"size":984,"mtime":1638749738065,"results":"26","hashOfConfig":"15"},{"size":528,"mtime":1638248972555,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"27qojz",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Lenovo\\boggle\\src\\index.js",[],["57","58"],"C:\\Users\\Lenovo\\boggle\\src\\App.js",["59"],"import logo from './boggle.png';\nimport solver from './boggle_solver.js';\nimport {LoginButton, LogoutButton} from './Authentication.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport React, { useState, useEffect } from 'react';\nimport {GAME_STATE} from './GameState.js';\nimport {RandomGrid} from './randomGen.js';\nimport './App.css';\nimport firebase from \"./firebase.js\"\n\n\n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [allSolutions, setAllSolutions] = useState([]);  // solutions from solver\n  const [foundSolutions, setFoundSolutions] = useState([]);  // found by user\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE); // Just an enuerator or the three states see below\n  const [grid, setGrid] = useState([]);   // the grid\n  const [totalTime, setTotalTime] = useState(0);  // total time elapsed\n  const [size, setSize] = useState(3);  // selected grid size\n\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = solver.findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n  return (\n      <div className=\"App\">\n        <img src={logo} width=\"200\" height=\"200\" className=\"App-logo\" alt=\"Boggle Logo\" />\n        {currentUser ? (\n          <div>\n            <LogoutButton setCurrentUser={setCurrentUser}/>\n            <ToggleGameState gameState={gameState}\n              setGameState={(state) => setGameState(state)}\n              setSize={(state) => setSize(state)}\n              setTotalTime={(state) => setTotalTime(state)}\n              numFound={foundSolutions.length}\n              theGrid={JSON.stringify(grid)}\n              setGrid={(state) => setGrid(state)}\n              user={currentUser}/> \n  \n            { gameState === GAME_STATE.IN_PROGRESS &&\n              <div>\n                <Board board={grid} />\n                <GuessInput allSolutions={allSolutions}\n                  foundSolutions={foundSolutions}\n                  correctAnswerCallback={(answer) => correctAnswerFound(answer)}/>\n                <FoundSolutions headerText=\"Solutions you've found\" words={foundSolutions} />\n              </div>\n            }\n  \n            { gameState === GAME_STATE.ENDED &&\n              <div>\n                <Board board={grid} />\n                <SummaryResults words={foundSolutions} totalTime={totalTime} />\n                <FoundSolutions headerText=\"Missed Words [wordsize > 3]: \" words={allSolutions}  />\n              </div>\n            }\n          </div>\n        ) : (\n          <LoginButton setCurrentUser={(user) => setCurrentUser(user)} />\n        )}\n      </div>\n    );\n  }\n  \n  export default App;\n  ","C:\\Users\\Lenovo\\boggle\\src\\reportWebVitals.js",[],"C:\\Users\\Lenovo\\boggle\\src\\boggle_solver.js",["60","61","62","63"],"//Boggle Assignment 3: Improved after review\n//Submitted by Aashish Adhikari @02986124\n\n//added comments as per the suggestion\n//added more test cases\n\n//Initializing Trie class\nclass Trie{\n  constructor(){\n    this.head = {}\n    this.end = '#'  \n  }\n\n//inserting a word inside trie for faster lookups\ninsert(word) {       \n  var length = word.length\n  if (length == 0) return;\n  var node = this.head\n  for (var i = 0; i < length; i++) {\n    var char = word[i]\n    if (!(char in node)) {\n      node[char] = {}\n    }\n    node = node[char]\n  }\n  node[this.end] = word\n}\n}  \n//this will search in our trie along the path of dfs\nexports.searchTrie = function() {\n  for (var i = 0; i < this.rows; i++) {\n    for (var j = 0; j < this.columns; j++) {\n      var visited = new Array(this.rows).fill(0).map(() => new Array(this.columns).fill(false))\n      this.dfs(this.trie.head, i, j, visited)\n    }\n  }\n}\n\n//this function appends to our set all the found valid solutions and takes cares of edge cases like empty grid, empty dict\n exports.findAllSolutions = function(grid, dictionary) {\n  if (!grid.length) return []\n  if (grid == null || dictionary == null) return []\n\n  this.rows = grid.length\n  this.columns = grid[0].length\n  for (var i = 0; i < this.rows; i++) {\n    if (grid[i].length != this.columns) return []\n  }\n\n  this.solns = new Set();\n\n  this.rows = grid.length\n  this.columns = grid[0].length\n  this.directions = [-1, 0, 1] //directions to move in the grid\n  this.grid = grid  //initializing grid reference inside the function\n\n  this.trie = new Trie();  //initialising new trie object to add our words from dict\n  for (const word of dictionary) {\n    if (word.length > 2) this.trie.insert(word.toLowerCase())\n  }\n\n  this.searchTrie(); //searching the trie with words from dict\n\n  return Array.from(this.solns).sort();  //return valid words\n}\n\n//checking to see if we go out of bounds of our grid\nexports.isSafeToVisit = function (i, j, visited){\n\treturn (i >= 0 && i < this.rows && j >= 0 && j < this.columns && !visited[i][j]); \n};\n\n\n//traversing adjacent tiles defined within our directions\nexports.traverseAdjacent = function(node, x, y, visited) {\n  if (this.trie.end in node) {\n    var word = node[this.trie.end]\n    this.solns.add(word)\n  }\n  for (var i of this.directions) {\n    for (var j of this.directions) {\n      var xi = x + i\n      var yi = y + j\n      if (this.isSafeToVisit(xi, yi, visited)) {\n        this.dfs(node, xi, yi, visited)\n      }\n    }\n  }\n}\n//the originial dfs function that moves along the path and adds found words\nexports.dfs = function(node, x, y, visited) {\n\n  if (this.trie.end in node) {\n    var found = node[this.trie.end]\n    if (found.length > 2) this.solns.add(found)\n  }\n\n  if (visited[x][y]) return\n  visited[x][y] = true\n\n  var char = this.grid[x][y].toLowerCase()\n  if (char.length == 1) {\n    if (char in node) {\n      node = node[char]\n      this.traverseAdjacent(node, x, y, visited)\n    }\n  } else {\n    var temp = node\n    var i = 0\n    var search = true\n    while (i < char.length && search) {\n      if (char[i] in temp && temp[char[i]] != '#') {\n        temp = temp[char[i]]\n        i++\n      } else {\n        search = false\n      }\n    }\n    if (search) {\n      this.traverseAdjacent(temp, x, y, visited)\n    }\n  }\n\n  visited[x][y] = false  //set visited to false after moving down a path\n}","C:\\Users\\Lenovo\\boggle\\src\\GuessInput.js",[],"C:\\Users\\Lenovo\\boggle\\src\\Board.js",[],"C:\\Users\\Lenovo\\boggle\\src\\FoundSolutions.js",[],"C:\\Users\\Lenovo\\boggle\\src\\SummaryResults.js",[],"C:\\Users\\Lenovo\\boggle\\src\\ToggleGameState.js",[],"C:\\Users\\Lenovo\\boggle\\src\\GameState.js",[],"C:\\Users\\Lenovo\\boggle\\src\\randomGen.js",[],"C:\\Users\\Lenovo\\boggle\\src\\Authentication.js",[],"C:\\Users\\Lenovo\\boggle\\src\\firebase.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":13,"column":8,"nodeType":"70","messageId":"71","endLine":13,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":17,"column":14,"nodeType":"74","messageId":"75","endLine":17,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":47,"column":24,"nodeType":"74","messageId":"75","endLine":47,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":101,"column":19,"nodeType":"74","messageId":"75","endLine":101,"endColumn":21},{"ruleId":"72","severity":1,"message":"76","line":111,"column":44,"nodeType":"74","messageId":"75","endLine":111,"endColumn":46},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]